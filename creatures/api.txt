* Settings (minetest.conf):

	enable_damage = false: When the damage system is off, mobs will not attack. Mobs that would otherwise attack a creature will instead consider avoiding them.
	only_peaceful_mobs = false: When enabled, only mobs that don't have the ability to attack will spawn.
	fast_mobs = false: Whether mobs can run. This should only be turned on when players have the "fast" privilege by default, to ensure balanced gameplay.
	pathfinding = false: Enables mob pathfinding system. Highly experimental, only use for testing purposes!

* creatures.player_formspec = function(def): The inventory formspec for all players. Set whenever the player becomes a different creature. Must return either a string, either nil for no effect. def represents the player definition, from which player parameters may be read (see below).

* creatures.player_default = "creatures:ghost": Players who aren't part of a race are set to this creature. Typically applies to new players who join the server for the first time.

* creatures:register_creature("creatures:ghost", {..}): Defines a new creature, with the current parameters:

- Common parameters (applied to both creatures and players):
	icon = "mobs_*_icon.png": Icon for this creature, indicating what a player or mob is. Players should see it in the inventory menu or the HUD.
	hp_max = 20: Mobs and players are born with this amount of health, and cannot gain more than it.
	armor = 100: Armor decides how much damage gets absorbed.
	collisionbox = {-0.5, 0, -0.5, 0.5, 2, 0.5}: Collosion box size. (TODO: Currently works only for mobs, engine implementation needed for players!)
	visual = "sprite": Visual type of the player and mob.
	mesh = "": 3D model of the player and mob, when mesh visual is used.
	textures = {"clear.png", ...}: Textures used by the player and mob.
	textures = {{"clear.png", ...}, ...}: Texture sets used by the player and mob. When defined like this, a skin is randomly chosen for each creature.
	visual_size = {x=1, y=1}: Scales the visual of the player and mob.
	animation = {speed = 0, stand = {1, 31}, ...}: List of animation ranges, containing the following entries: speed, stand_start, stand_end, walk_start, walk_end, run_start, run_end, punch_start, punch_end.
	sounds = {random_idle = "filename", ...}: A list containing sound effects for various actions. Valid entries: random_idle, random_attack, random_follow, random_avoid, attack, damage, die.
	makes_footstep_sound = false: Whether the player and mob make footstep sounds while walking. (TODO: Currently works only for mobs, engine implementation needed for players!)
	env_damage = {water = 0, ...}: Enrivonment damage. Valid entries: water, lava, light.
	physics = {speed = 1, ...}: Modifies player and mob movement, as an offset to the physics settings in minetest.conf. Valid entries: speed, jump, gravity.
	teams = {monsters = 1, ...}: Contains an interest list, where 1 means "pro" and -1 means "con". Friend or foe relationships are determined based on how many things two creatures have in common here.

- Mob only parameters:
	drops = {{name = "default:sword_bronze", chance = 40, min = 1, max = 1,}, ...}: Contains a list of items and probabilities, which determines what the player gets after killing a mob.
	on_rightclick = function(self, clicker) {...}: A custom function can be assigned to this, which will be executed when the mob is right-clicked by a player.
	attack_damage = 1: How much damage the mob deals each punch or shot.
	attack_type = "melee": Can be "melee" (mob punches the player) or "shoot" (mob throws projectiles toward the player).
	nodes = {{nodes = "default:dirt", ...}, ...}: A list of parameters, which specifies how mobs react to certain nodes. Each entry represents one target per mob. Parameters include:
		nodes = {"default:dirt", ...}: List of nodes or node groups that mobs will search for.
		light_min = 0: Minimum light level the node most have to be considered an objective.
		light_max = 15: Maximum light level the node most have to be considered an objective.
		avoid = false: If true, the mob avoids this node opposed to walking toward it.
		priority = 0: Target priority. The higher, the more importance the mob will give to this node.
	names = {{"Mike", "Dan", ...}, {...}}: A random name will be chosen from this list for each mob. Can be empty for mobs that shouldn't have a name (eg: monsters).
	traits = {attack_interval = {1, 1}, ...}: Personality traits. Each individual mob gets a value between min and max when it first spawns. Actor mobs persist those settings between server restarts. Default traits:
		attack_interval = {1, 1}: How many seconds the mob shoots or punches. Lower means a greater attack skill.
		think = {1, 1}: How many seconds the mob makes new decisions or takes actions. AI speed is this value when idle, half this value when following or avoiding, and a tenth this value when attacking. Lower values mean smarter mobs. Do not abuse this, low values also mean more server load!
		vision = {15, 15}: View distance of the mob, and the range in which objectives are detected.
		loyalty = {0.5, 0.5}: How probable it is that the mob will follow allies around and defend them. Must range between 0 and 1!
		fear = {0.5, 0.5}: Likeliness of the mob running away from enemies (if aggressivity doesn't succeed first). Must range between 0 and 1!
		aggressivity = {0.5, 0.5}: Likeliness of the mob to attack enemies (if fear doesn't succeed first). Must range between 0 and 1!
		determination = {0.5, 0.5}: How close a new target must be in order to be added (traits.vision * traits.determination). Must range between 0 and 1!
	teams_target = {attack = true, avoid = true, follow = true}: What types of targets this mob will automatically add or change based on team relationships. Can be nil for default behavior.
	on_activate = function(self, staticdata, dtime_s) ... end: Function executed when the mob is activated. By default, this should call the logic_mob_activate function.
	on_step = function(self, dtime) ... end: Function executed each step. By default, this should call the logic_mob_step function.
	on_punch = function(self, hitter, time_from_last_punch, tool_capabilities, dir) ... end: Function executed when the mob is punched. By default, this should call the logic_mob_punch function.
	on_rightclick = function(self, clicker) ... end: Function executed when the mob is right-clicked. By default, this should call the logic_mob_rightclick function.

- Player only parameters:
	inventory_main = {x = 8, y = 4}: Size of the main inventory for players which are part of this race.
	inventory_craft = {x = 1, y = 1}: Size of the craft area for players which are part of this race.
	ghost = "": What creature the player becomes upon death. If blank, creatures.player_default is used.
	eye_offset = {{x = 0, y = 0, z = 0}, {x = 0, y = 0, z = 0}}: Camera offset for 1st and 3rd person views, used to adjust the camera to eye position for creatures of various shapes and sizes.
	fog = {r = 0, g = 0, b = 0}: If set, this fog color is seen by players who are part of this race.
	screen = "hud_*.png": If set, this image is applied over the screen. Use a transparent image here, unless you wish to block the player's vision entirely.
	ambience = "ambient_*": If set, the player will constantly hear this ambiental sound.
	player_join = function(player) ... end: Function executed when a player joins. By default, this should call the logic_player_join function.
	player_step = function(player, dtime) ... end: Function executed each step. By default, this should call the logic_player_step function.
	player_die = function(player) ... end: Function executed when the player dies. By default, this should call the logic_player_die function.
	player_respawn = function(player) ... end: Function executed when the player respawns. By default, this should call the logic_player_respawn function.

- Module parameters:
	custom = {mymod = {param1 = "test", param2 = 0, ...} ...}: Allows defining custom properties for modules (sub-mods). For example, if a creature uses a module called "mymod", add specific parameters as mymod = { x = 0, y = 1, ... } to this list, and read them as custom.mymod.x, custom.mymod.y, etc. in the mod.
	traits = {mytrait = {0.25, 0.75}, ...}: Apart from the default traits, custom personality traits for modules may also be defined, as long as they use the same format (mytrait = {min_value, max_value}).
	on_* = function(...) & player_* = function(...): You can include functions from your modules in the builtin execution functions, to run custom code for players and mobs. For example, in on_step, you can add a mymod_step() function after the essential logic_mob_step() function.

* creatures:register_spawn("creatures:human", {"default:dirt_with_grass"}, 20, -1, 9000, 1, 31000, nil): Configures a mob to spawn on a given node. Parameters:
	name: The name of this creature, eg: creatures:human
	nodes: A list of nodes that this spawn applies for, eg: {"default:dirt_with_grass", ...}
	max_light: Maximum light value at which the mob spawns.
	min_light: Minimum light value at which the mob spawns.
	chance: The greater this value, the lower the chances that this mob will spawn. A good default is 10000.
	active_object_count: When there are more mobs than this, the spawn will deactivate. Don't abuse this, too many mobs can greatly decrease server performance!
	max_height: Maximum height this spawner will work at. (TODO: Also add a min_height)
	spawn_func: Custom spawn function.

* creatures:register_projectile("creatures:fireball", {...}): Defines a projectile, used by mobs with the "shoot" attack type. Parameters:
	visual = "sprite": Visual type of the projectile.
	visual_size = {x=1, y=1}: Scale of the projectile visual.
	textures = {"mobs_fireball.png"}: Texture of the projectile visual.
	velocity = 5: Velocity at which the projectile travels.
	hit_player = function(self, player) {...}: Function which executes when the projectile hits a player. Use player:punch to apply damage.

* Scripting - Public functions:
	creatures.selected[player]: The creature which was last right-clicked by 'player'.
	creatures:player_get(player): Gets the race of a player as a table: [1] = name, [2] = skin
	creatures:player_set(player, settings): Sets the race of a player from a table: [1] = name, [2] = skin
	creatures:alliance(creature1, creature2): Returns the alliance between two mobs and / or players, ranging between -1 and 1.
	creatures:possess(player, creature): Causes a player to possess a creature.

* Scripting - Formspec:
	A formspec should be defined for each creature, in order to allow interaction between players and mobs (including possession). Formspec settings should be defined together with creatures, ideally as a common function.
	The formspec is shown to the player by calling minetest.show_formspec(clicker:get_player_name(), "creatures:formspec", formspec) from the creature's on_rightclick function.
	Whenever a player right-clicks a mob, their creatures.selected entry is updated. Therefore you can reference the mob the formspec is referring to as creatures.selected[clicker].
	The formspec can contain its own fields, which can be read using a custom minetest.register_on_player_receive_fields function.

* Scripting - Targets:
	By default, mobs will attack or avoid foes and follow allies. This is determined by the teams field (see "creatures:alliance") and each behavoir can be disabled using "teams_target". Mobs may also walk to random nodes, based on the rules specified in "nodes".
	Mob targets are of three types: Attack, Avoid, Follow. Each target can address either an entity (creature) or a position (node). Each target has a priority, which together with distance is used to determine which task the mob chooses.
	A mob's targets can be referenced in two ways: As self.targets[name] or self.current_target. The second simply references an entry from the first... the one which is currently being carried out. Modifying self.current_target has no effect, it is read-only!
	To add a custom target, use table.insert(self.targets[name], {...}). To remove one, use self.targets[name] = nil. Every custom target must have the persist property set to true, otherwise the code will assume it was added automatically and may modify it!
	Below is a list of the default target properties. You can add and use your own if needed, eg: self.targets[mytarget].mytext = "I'm a target".
		entity = object: The entity this target is addressing. Can be a player or any Lua object. Alternatively you can use "position".
		position = {...}: The position this target is addressing. Alternatively you can use "entity".
		objective = "type": The type of action to take. Can be "attack", "avoid", or "follow".
		distance = 10: Optional. When set, the target will be taken into account if no further away than this value. If not set, only if it's within the mob's radius of vision.
		priority = 0.5: The importance of this target. The target with the highest priority will be the task carried on by the mob. This also determines the probability for the target to be added at all (per think).
		persist = true: Prevents the logic code from modifying this target, and also persists it on the mob entity. Always set this to true!
